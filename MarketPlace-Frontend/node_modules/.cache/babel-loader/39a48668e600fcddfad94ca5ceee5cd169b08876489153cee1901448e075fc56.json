{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krpra\\\\Desktop\\\\Dapps\\\\my-dapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n//src/App.js\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { ethers } from 'ethers';\n// import SimpleContractABI from './contracts/SimpleContract.json';\n\n// const App = () => {\n//   const [contractValue, setContractValue] = useState('');\n//   const [newValue, setNewValue] = useState('');\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\n//   const contractAddress = '0xf090f16dEc8b6D24082Edd25B1C8D26f2bC86128'; // Replace with the deployed contract address from deploy.js\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider.getSigner());\n\n//   const getContractValue = async () => {\n//     const value = await contract.getValue();\n//     setContractValue(value.toString());\n//   };\n\n//   useEffect(() => {\n//     getContractValue();\n//   }, []);\n\n//   const incrementValue = async () => {\n//     await contract.incrementValue();\n//     getContractValue();\n//   };\n\n//   const decrementValue = async () => {\n//     await contract.decrementValue();\n//     getContractValue();\n//   };\n\n//   const handleInputChange = (event) => {\n//     setNewValue(event.target.value);\n//   };\n\n//   const setValue = async () => {\n//     if (!newValue) return;\n//     await contract.setValue(newValue);\n//     getContractValue();\n//     setNewValue('');\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>SimpleContract Frontend</h1>\n//       <p>Contract Value: {contractValue}</p>\n//       <button onClick={incrementValue}>Increment Value</button>\n//       <button onClick={decrementValue}>Decrement Value</button>\n//       <br />\n//       <input type=\"number\" value={newValue} onChange={handleInputChange} />\n//       <button onClick={setValue}>Set Value</button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { ethers } from 'ethers';\n// import detectEthereumProvider from '@metamask/detect-provider';\n// import SimpleContractABI from './contracts/SimpleContract.json';\n\n// const App = () => {\n//   const [contractValue, setContractValue] = useState('');\n//   const [newValue, setNewValue] = useState('');\n//   const [walletAddress, setWalletAddress] = useState('');\n//   const [provider, setProvider] = useState(null);\n//   const [contract, setContract] = useState(null);\n\n//   const contractAddress = ' 0x114e375B6FCC6d6fCb68c7A1d407E652C54F25FB'; // Replace with the deployed contract address from deploy.js\n\n//   useEffect(() => {\n//     const initializeProvider = async () => {\n//       const provider = await detectEthereumProvider();\n\n//       if (provider) {\n//         setProvider(new ethers.providers.Web3Provider(provider));\n//       } else {\n//         console.error('Please install Metamask to interact with the wallet.');\n//       }\n//     };\n\n//     initializeProvider();\n//   }, []);\n\n//   useEffect(() => {\n//     if (provider) {\n//       const signer = provider.getSigner();\n//       setContract(new ethers.Contract(contractAddress, SimpleContractABI.abi, signer));\n//     }\n//   }, [provider]);\n\n//   const getContractValue = async () => {\n//     if (contract) {\n//       const value = await contract.getValue();\n//       setContractValue(value.toString());\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (contract) {\n//       getContractValue();\n//     }\n//   }, [contract]);\n\n//   const incrementValue = async () => {\n//     if (contract) {\n//       await contract.incrementValue();\n//       getContractValue();\n//     }\n//   };\n\n//   const decrementValue = async () => {\n//     if (contract) {\n//       await contract.decrementValue();\n//       getContractValue();\n//     }\n//   };\n\n//   const handleInputChange = (event) => {\n//     setNewValue(event.target.value);\n//   };\n\n//   const setValue = async () => {\n//     if (!newValue || !contract) return;\n//     await contract.setValue(newValue);\n//     getContractValue();\n//     setNewValue('');\n//   };\n\n//   const connectWallet = async () => {\n//     if (provider) {\n//       try {\n//         const accounts = await provider.send('eth_requestAccounts', []);\n//         setWalletAddress(accounts[0]);\n//       } catch (error) {\n//         console.error('Error connecting to the wallet:', error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>SimpleContract Frontend</h1>\n//       <p>Wallet Address: {walletAddress}</p>\n//       <p>Contract Value: {contractValue}</p>\n//       <button onClick={connectWallet}>Connect Wallet</button>\n//       <button onClick={incrementValue}>Increment Value</button>\n//       <button onClick={decrementValue}>Decrement Value</button>\n//       <br />\n//       <input type=\"number\" value={newValue} onChange={handleInputChange} />\n//       <button onClick={setValue}>Set Value</button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { ethers } from 'ethers';\n// import detectEthereumProvider from '@metamask/detect-provider';\n// import SimpleContractABI from './contracts/SimpleContract.json';\n\n// const App = () => {\n//   const [contractValue, setContractValue] = useState('');\n//   const [newValue, setNewValue] = useState('');\n//   const [walletAddress, setWalletAddress] = useState(''); \n//   const [provider, setProvider] = useState(null);\n//   const [contract, setContract] = useState(null);\n\n//   const contractAddress = '0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6'; \n\n//   useEffect(() => {\n//     const initializeProvider = async () => {\n//       const provider = await detectEthereumProvider();\n\n//       if (provider) {\n//         setProvider(new ethers.providers.Web3Provider(provider));\n//       } else {\n//         console.error('Please install Metamask to interact with the wallet.');\n//       }\n//     };\n\n//     initializeProvider();\n//   }, []);\n\n//   useEffect(() => {\n//     if (provider) {\n//       const signer = provider.getSigner();\n//       setContract(new ethers.Contract(contractAddress, SimpleContractABI.abi, signer));\n//     }\n//   }, [provider]);\n\n//   const getContractValue = async () => {\n//     if (contract) {\n//       try {\n//         const value = await contract.getValue();\n//         setContractValue(value.toString());\n//       } catch (error) {\n//         console.error('Error getting contract value:', error);\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (contract) {\n//       getContractValue();\n//     }\n//   }, [contract]);\n\n//   const incrementValue = async () => {\n//     if (contract) {\n//       try {\n//         await contract.incrementValue();\n//         getContractValue();\n//       } catch (error) {\n//         console.error('Error incrementing value:', error);\n//       }\n//     }\n//   };\n\n//   const decrementValue = async () => {\n//     if (contract) {\n//       try {\n//         await contract.decrementValue();\n//         getContractValue();\n//       } catch (error) {\n//         console.error('Error decrementing value:', error);\n//       }\n//     }\n//   };\n\n//   const handleInputChange = (event) => {\n//     setNewValue(event.target.value);\n//   };\n\n//   const setValue = async () => {\n//     if (!newValue || !contract) return;\n//     try {\n//       // Parse the new value to an integer (assuming it's a number)\n//       const parsedValue = parseInt(newValue);\n//       await contract.setValue(parsedValue);\n//       getContractValue();\n//       setNewValue('');\n//     } catch (error) {\n//       console.error('Error setting value:', error);\n//     }\n//   };\n\n//   const connectWallet = async () => {\n//     if (provider) {\n//       try {\n//         const accounts = await provider.send('eth_requestAccounts', []);\n//         setWalletAddress(accounts[0]);\n//       } catch (error) {\n//         console.error('Error connecting to the wallet:', error);\n//       }\n//     }\n//   };\n\n//   const getOwnerAddress = async () => {\n//     if (contract) {\n//       try {\n//         const ownerAddress = await contract.getOwner();\n//         console.log('Owner Address:', ownerAddress);\n//       } catch (error) {\n//         console.error('Error retrieving owner address:', error);\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (contract) {\n//       getOwnerAddress();\n//     }\n//   }, [contract]);\n\n//   return (\n//     <div className=\"App\">\n//       <h1>SimpleContract Frontend</h1>\n//       <p>Wallet Address: {walletAddress}</p>\n//       <p>Contract Value: {contractValue}</p>\n//       <button onClick={connectWallet}>Connect Wallet</button>\n//       <button onClick={incrementValue}>Increment Value</button>\n//       <button onClick={decrementValue}>Decrement Value</button>\n//       <br />\n//       <input type=\"number\" value={newValue} onChange={handleInputChange} />\n//       <button onClick={setValue}>Set Value</button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { ethers } from 'ethers';\n// import SimpleContractABI from './contracts/SimpleContract.json';\n\n// const App = () => {\n//   const [contractValue, setContractValue] = useState('');\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\n//   const contractAddress = '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0';\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\n\n//   const getContractValue = async () => {\n//     const value = await contract.getValue();\n//     setContractValue(value.toString());\n//   };\n\n//   useEffect(() => {\n//     getContractValue();\n//   }, []);\n\n//   const incrementValue = async () => {\n//     try {\n//       // Check if MetaMask is installed and accessible\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.incrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   const decrementValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.decrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>SimpleContract Frontend</h1>\n//       <p>Contract Value: {contractValue}</p>\n//       <button onClick={incrementValue}>Increment Value</button>\n//       <button onClick={decrementValue}>Decrement Value</button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { ethers } from 'ethers';\n// import SimpleContractABI from './contracts/SimpleContract.json';\n\n// const App = () => {\n//   const [contractValue, setContractValue] = useState('');\n//   const [newValue, setNewValue] = useState('');\n\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\n//   const contractAddress = ' 0xf090f16dEc8b6D24082Edd25B1C8D26f2bC86128';\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\n\n//   const getContractValue = async () => {\n//     const value = await contract.getValue();\n//     setContractValue(value.toString());\n//   };\n\n//   useEffect(() => {\n//     getContractValue();\n//   }, []);\n\n//   const handleSetValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.setValue(newValue);\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   const handleIncrementValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.incrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   const handleDecrementValue = async () => {\n//     try {\n//       if (window.ethereum) {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const signer = provider.getSigner(accounts[0]);\n//         const contractWithSigner = contract.connect(signer);\n\n//         await contractWithSigner.decrementValue();\n//         getContractValue();\n//       } else {\n//         alert('MetaMask is not installed or not accessible.');\n//       }\n//     } catch (error) {\n//       console.error('Error sending transaction:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>SimpleContract Frontend</h1>\n//       <p>Contract Value: {contractValue}</p>\n//       <div>\n//         <input type=\"number\" value={newValue} onChange={(e) => setNewValue(e.target.value)} />\n//         <button onClick={handleSetValue}>Set Value</button>\n//       </div>\n//       <button onClick={handleIncrementValue}>Increment Value</button>\n//       <button onClick={handleDecrementValue}>Decrement Value</button>\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { ethers } from 'ethers';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport MarketplaceABI from './contracts/Marketplace.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [productName, setProductName] = useState('');\n  const [productPrice, setProductPrice] = useState('');\n  const [products, setProducts] = useState([]);\n  const [provider, setProvider] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [walletAddress, setWalletAddress] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const contractAddress = '0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9';\n  useEffect(() => {\n    const initializeProvider = async () => {\n      const provider = await detectEthereumProvider();\n      if (provider) {\n        setProvider(new ethers.providers.Web3Provider(provider));\n      } else {\n        console.error('Please install Metamask to interact with the wallet.');\n      }\n    };\n    initializeProvider();\n  }, []);\n  useEffect(() => {\n    if (provider) {\n      const signer = provider.getSigner();\n      setContract(new ethers.Contract(contractAddress, MarketplaceABI.abi, signer));\n    }\n  }, [provider]);\n  const getWalletAddress = async () => {\n    try {\n      const accounts = await provider.send('eth_requestAccounts', []);\n      setWalletAddress(accounts[0]);\n    } catch (error) {\n      console.error('Error connecting to the wallet:', error);\n    }\n  };\n  const addProduct = async () => {\n    if (productName && productPrice && contract) {\n      try {\n        await contract.addProduct(productName, ethers.utils.parseEther(productPrice));\n        getProducts();\n        setProductName('');\n        setProductPrice('');\n      } catch (error) {\n        console.error('Error adding product:', error);\n      }\n    }\n  };\n  const purchaseProduct = async (productId, productPrice) => {\n    if (contract) {\n      try {\n        await contract.purchaseProduct(productId, {\n          value: productPrice\n        });\n        getProducts();\n      } catch (error) {\n        console.error('Error purchasing product:', error);\n      }\n    }\n  };\n  const getProducts = async () => {\n    if (contract) {\n      try {\n        const count = await contract.productCount();\n        setProductCount(count.toNumber());\n        const productList = [];\n        for (let i = 1; i <= count.toNumber(); i++) {\n          const product = await contract.products(i);\n          productList.push({\n            id: product.id.toNumber(),\n            name: product.name,\n            price: ethers.utils.formatEther(product.price),\n            seller: product.seller,\n            isAvailable: product.isAvailable\n          });\n        }\n        setProducts(productList);\n      } catch (error) {\n        console.error('Error getting products:', error);\n      }\n    }\n    setIsLoading(false);\n  };\n  useEffect(() => {\n    if (contract) {\n      getWalletAddress();\n      getProducts();\n    }\n  }, [contract]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 577,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Marketplace Frontend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Wallet Address: \", walletAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Product Name\",\n        value: productName,\n        onChange: e => setProductName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Product Price (Ether)\",\n        value: productPrice,\n        onChange: e => setProductPrice(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addProduct,\n        children: \"Add Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Available Products\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 9\n      }, this), products.map(product => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 15\n          }, this), \" \", product.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Price:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 15\n          }, this), \" \", product.price, \" Ether\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Seller:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 15\n          }, this), \" \", product.seller]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 13\n        }, this), product.isAvailable ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => purchaseProduct(product.id, ethers.utils.parseEther(product.price)),\n          children: \"Purchase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This product is not available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 13\n        }, this)]\n      }, product.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 581,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"esn5vReW1LBTvUQ9XNEA9JVoXiQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ethers","detectEthereumProvider","MarketplaceABI","jsxDEV","_jsxDEV","App","_s","productName","setProductName","productPrice","setProductPrice","products","setProducts","provider","setProvider","contract","setContract","walletAddress","setWalletAddress","isLoading","setIsLoading","contractAddress","initializeProvider","providers","Web3Provider","console","error","signer","getSigner","Contract","abi","getWalletAddress","accounts","send","addProduct","utils","parseEther","getProducts","purchaseProduct","productId","value","count","productCount","setProductCount","toNumber","productList","i","product","push","id","name","price","formatEther","seller","isAvailable","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","onChange","e","target","onClick","map","_c","$RefreshReg$"],"sources":["C:/Users/krpra/Desktop/Dapps/my-dapp/src/App.js"],"sourcesContent":["//src/App.js\r\n// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n// import { ethers } from 'ethers';\r\n// import SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\n// const App = () => {\r\n//   const [contractValue, setContractValue] = useState('');\r\n//   const [newValue, setNewValue] = useState('');\r\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\r\n//   const contractAddress = '0xf090f16dEc8b6D24082Edd25B1C8D26f2bC86128'; // Replace with the deployed contract address from deploy.js\r\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider.getSigner());\r\n\r\n//   const getContractValue = async () => {\r\n//     const value = await contract.getValue();\r\n//     setContractValue(value.toString());\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getContractValue();\r\n//   }, []);\r\n\r\n//   const incrementValue = async () => {\r\n//     await contract.incrementValue();\r\n//     getContractValue();\r\n//   };\r\n\r\n//   const decrementValue = async () => {\r\n//     await contract.decrementValue();\r\n//     getContractValue();\r\n//   };\r\n\r\n//   const handleInputChange = (event) => {\r\n//     setNewValue(event.target.value);\r\n//   };\r\n\r\n//   const setValue = async () => {\r\n//     if (!newValue) return;\r\n//     await contract.setValue(newValue);\r\n//     getContractValue();\r\n//     setNewValue('');\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>SimpleContract Frontend</h1>\r\n//       <p>Contract Value: {contractValue}</p>\r\n//       <button onClick={incrementValue}>Increment Value</button>\r\n//       <button onClick={decrementValue}>Decrement Value</button>\r\n//       <br />\r\n//       <input type=\"number\" value={newValue} onChange={handleInputChange} />\r\n//       <button onClick={setValue}>Set Value</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n// import { ethers } from 'ethers';\r\n// import detectEthereumProvider from '@metamask/detect-provider';\r\n// import SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\n// const App = () => {\r\n//   const [contractValue, setContractValue] = useState('');\r\n//   const [newValue, setNewValue] = useState('');\r\n//   const [walletAddress, setWalletAddress] = useState('');\r\n//   const [provider, setProvider] = useState(null);\r\n//   const [contract, setContract] = useState(null);\r\n\r\n//   const contractAddress = ' 0x114e375B6FCC6d6fCb68c7A1d407E652C54F25FB'; // Replace with the deployed contract address from deploy.js\r\n\r\n//   useEffect(() => {\r\n//     const initializeProvider = async () => {\r\n//       const provider = await detectEthereumProvider();\r\n\r\n//       if (provider) {\r\n//         setProvider(new ethers.providers.Web3Provider(provider));\r\n//       } else {\r\n//         console.error('Please install Metamask to interact with the wallet.');\r\n//       }\r\n//     };\r\n\r\n//     initializeProvider();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (provider) {\r\n//       const signer = provider.getSigner();\r\n//       setContract(new ethers.Contract(contractAddress, SimpleContractABI.abi, signer));\r\n//     }\r\n//   }, [provider]);\r\n\r\n//   const getContractValue = async () => {\r\n//     if (contract) {\r\n//       const value = await contract.getValue();\r\n//       setContractValue(value.toString());\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (contract) {\r\n//       getContractValue();\r\n//     }\r\n//   }, [contract]);\r\n\r\n//   const incrementValue = async () => {\r\n//     if (contract) {\r\n//       await contract.incrementValue();\r\n//       getContractValue();\r\n//     }\r\n//   };\r\n\r\n//   const decrementValue = async () => {\r\n//     if (contract) {\r\n//       await contract.decrementValue();\r\n//       getContractValue();\r\n//     }\r\n//   };\r\n\r\n//   const handleInputChange = (event) => {\r\n//     setNewValue(event.target.value);\r\n//   };\r\n\r\n//   const setValue = async () => {\r\n//     if (!newValue || !contract) return;\r\n//     await contract.setValue(newValue);\r\n//     getContractValue();\r\n//     setNewValue('');\r\n//   };\r\n\r\n//   const connectWallet = async () => {\r\n//     if (provider) {\r\n//       try {\r\n//         const accounts = await provider.send('eth_requestAccounts', []);\r\n//         setWalletAddress(accounts[0]);\r\n//       } catch (error) {\r\n//         console.error('Error connecting to the wallet:', error);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>SimpleContract Frontend</h1>\r\n//       <p>Wallet Address: {walletAddress}</p>\r\n//       <p>Contract Value: {contractValue}</p>\r\n//       <button onClick={connectWallet}>Connect Wallet</button>\r\n//       <button onClick={incrementValue}>Increment Value</button>\r\n//       <button onClick={decrementValue}>Decrement Value</button>\r\n//       <br />\r\n//       <input type=\"number\" value={newValue} onChange={handleInputChange} />\r\n//       <button onClick={setValue}>Set Value</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n// import { ethers } from 'ethers';\r\n// import detectEthereumProvider from '@metamask/detect-provider';\r\n// import SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\n// const App = () => {\r\n//   const [contractValue, setContractValue] = useState('');\r\n//   const [newValue, setNewValue] = useState('');\r\n//   const [walletAddress, setWalletAddress] = useState(''); \r\n//   const [provider, setProvider] = useState(null);\r\n//   const [contract, setContract] = useState(null);\r\n\r\n//   const contractAddress = '0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6'; \r\n\r\n//   useEffect(() => {\r\n//     const initializeProvider = async () => {\r\n//       const provider = await detectEthereumProvider();\r\n\r\n//       if (provider) {\r\n//         setProvider(new ethers.providers.Web3Provider(provider));\r\n//       } else {\r\n//         console.error('Please install Metamask to interact with the wallet.');\r\n//       }\r\n//     };\r\n\r\n//     initializeProvider();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (provider) {\r\n//       const signer = provider.getSigner();\r\n//       setContract(new ethers.Contract(contractAddress, SimpleContractABI.abi, signer));\r\n//     }\r\n//   }, [provider]);\r\n\r\n//   const getContractValue = async () => {\r\n//     if (contract) {\r\n//       try {\r\n//         const value = await contract.getValue();\r\n//         setContractValue(value.toString());\r\n//       } catch (error) {\r\n//         console.error('Error getting contract value:', error);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (contract) {\r\n//       getContractValue();\r\n//     }\r\n//   }, [contract]);\r\n\r\n//   const incrementValue = async () => {\r\n//     if (contract) {\r\n//       try {\r\n//         await contract.incrementValue();\r\n//         getContractValue();\r\n//       } catch (error) {\r\n//         console.error('Error incrementing value:', error);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const decrementValue = async () => {\r\n//     if (contract) {\r\n//       try {\r\n//         await contract.decrementValue();\r\n//         getContractValue();\r\n//       } catch (error) {\r\n//         console.error('Error decrementing value:', error);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const handleInputChange = (event) => {\r\n//     setNewValue(event.target.value);\r\n//   };\r\n\r\n//   const setValue = async () => {\r\n//     if (!newValue || !contract) return;\r\n//     try {\r\n//       // Parse the new value to an integer (assuming it's a number)\r\n//       const parsedValue = parseInt(newValue);\r\n//       await contract.setValue(parsedValue);\r\n//       getContractValue();\r\n//       setNewValue('');\r\n//     } catch (error) {\r\n//       console.error('Error setting value:', error);\r\n//     }\r\n//   };\r\n\r\n//   const connectWallet = async () => {\r\n//     if (provider) {\r\n//       try {\r\n//         const accounts = await provider.send('eth_requestAccounts', []);\r\n//         setWalletAddress(accounts[0]);\r\n//       } catch (error) {\r\n//         console.error('Error connecting to the wallet:', error);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const getOwnerAddress = async () => {\r\n//     if (contract) {\r\n//       try {\r\n//         const ownerAddress = await contract.getOwner();\r\n//         console.log('Owner Address:', ownerAddress);\r\n//       } catch (error) {\r\n//         console.error('Error retrieving owner address:', error);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (contract) {\r\n//       getOwnerAddress();\r\n//     }\r\n//   }, [contract]);\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>SimpleContract Frontend</h1>\r\n//       <p>Wallet Address: {walletAddress}</p>\r\n//       <p>Contract Value: {contractValue}</p>\r\n//       <button onClick={connectWallet}>Connect Wallet</button>\r\n//       <button onClick={incrementValue}>Increment Value</button>\r\n//       <button onClick={decrementValue}>Decrement Value</button>\r\n//       <br />\r\n//       <input type=\"number\" value={newValue} onChange={handleInputChange} />\r\n//       <button onClick={setValue}>Set Value</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n// import { ethers } from 'ethers';\r\n// import SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\n\r\n// const App = () => {\r\n//   const [contractValue, setContractValue] = useState('');\r\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\r\n//   const contractAddress = '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0';\r\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\r\n\r\n//   const getContractValue = async () => {\r\n//     const value = await contract.getValue();\r\n//     setContractValue(value.toString());\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getContractValue();\r\n//   }, []);\r\n\r\n//   const incrementValue = async () => {\r\n//     try {\r\n//       // Check if MetaMask is installed and accessible\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.incrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   const decrementValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.decrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>SimpleContract Frontend</h1>\r\n//       <p>Contract Value: {contractValue}</p>\r\n//       <button onClick={incrementValue}>Increment Value</button>\r\n//       <button onClick={decrementValue}>Decrement Value</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n// import { ethers } from 'ethers';\r\n// import SimpleContractABI from './contracts/SimpleContract.json';\r\n\r\n// const App = () => {\r\n//   const [contractValue, setContractValue] = useState('');\r\n//   const [newValue, setNewValue] = useState('');\r\n\r\n//   const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\r\n//   const contractAddress = ' 0xf090f16dEc8b6D24082Edd25B1C8D26f2bC86128';\r\n//   const contract = new ethers.Contract(contractAddress, SimpleContractABI.abi, provider);\r\n\r\n//   const getContractValue = async () => {\r\n//     const value = await contract.getValue();\r\n//     setContractValue(value.toString());\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getContractValue();\r\n//   }, []);\r\n\r\n//   const handleSetValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.setValue(newValue);\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleIncrementValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.incrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDecrementValue = async () => {\r\n//     try {\r\n//       if (window.ethereum) {\r\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         const signer = provider.getSigner(accounts[0]);\r\n//         const contractWithSigner = contract.connect(signer);\r\n\r\n//         await contractWithSigner.decrementValue();\r\n//         getContractValue();\r\n//       } else {\r\n//         alert('MetaMask is not installed or not accessible.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error sending transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>SimpleContract Frontend</h1>\r\n//       <p>Contract Value: {contractValue}</p>\r\n//       <div>\r\n//         <input type=\"number\" value={newValue} onChange={(e) => setNewValue(e.target.value)} />\r\n//         <button onClick={handleSetValue}>Set Value</button>\r\n//       </div>\r\n//       <button onClick={handleIncrementValue}>Increment Value</button>\r\n//       <button onClick={handleDecrementValue}>Decrement Value</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { ethers } from 'ethers';\r\nimport detectEthereumProvider from '@metamask/detect-provider';\r\nimport MarketplaceABI from './contracts/Marketplace.json';\r\n\r\nconst App = () => {\r\n  \r\n  const [productName, setProductName] = useState('');\r\n  const [productPrice, setProductPrice] = useState('');\r\n  const [products, setProducts] = useState([]);\r\n  const [provider, setProvider] = useState(null);\r\n  const [contract, setContract] = useState(null);\r\n  const [walletAddress, setWalletAddress] = useState('');\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const contractAddress = '0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9';\r\n\r\n  useEffect(() => {\r\n    const initializeProvider = async () => {\r\n      const provider = await detectEthereumProvider();\r\n\r\n      if (provider) {\r\n        setProvider(new ethers.providers.Web3Provider(provider));\r\n      } else {\r\n        console.error('Please install Metamask to interact with the wallet.');\r\n      }\r\n    };\r\n\r\n    initializeProvider();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (provider) {\r\n      const signer = provider.getSigner();\r\n      setContract(new ethers.Contract(contractAddress, MarketplaceABI.abi, signer));\r\n    }\r\n  }, [provider]);\r\n\r\n  const getWalletAddress = async () => {\r\n    try {\r\n      const accounts = await provider.send('eth_requestAccounts', []);\r\n      setWalletAddress(accounts[0]);\r\n    } catch (error) {\r\n      console.error('Error connecting to the wallet:', error);\r\n    }\r\n  };\r\n\r\n  const addProduct = async () => {\r\n    if (productName && productPrice && contract) {\r\n      try {\r\n        await contract.addProduct(productName, ethers.utils.parseEther(productPrice));\r\n        getProducts();\r\n        setProductName('');\r\n        setProductPrice('');\r\n      } catch (error) {\r\n        console.error('Error adding product:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const purchaseProduct = async (productId, productPrice) => {\r\n    if (contract) {\r\n      try {\r\n        await contract.purchaseProduct(productId, { value: productPrice });\r\n        getProducts();\r\n      } catch (error) {\r\n        console.error('Error purchasing product:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getProducts = async () => {\r\n    if (contract) {\r\n      try {\r\n        const count = await contract.productCount();\r\n        setProductCount(count.toNumber());\r\n\r\n        const productList = [];\r\n        for (let i = 1; i <= count.toNumber(); i++) {\r\n          const product = await contract.products(i);\r\n          productList.push({\r\n            id: product.id.toNumber(),\r\n            name: product.name,\r\n            price: ethers.utils.formatEther(product.price),\r\n            seller: product.seller,\r\n            isAvailable: product.isAvailable,\r\n          });\r\n        }\r\n\r\n        setProducts(productList);\r\n      } catch (error) {\r\n        console.error('Error getting products:', error);\r\n      }\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (contract) {\r\n      getWalletAddress();\r\n      getProducts();\r\n    }\r\n  }, [contract]);\r\n\r\n  if (isLoading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Marketplace Frontend</h1>\r\n      <p>Wallet Address: {walletAddress}</p>\r\n      <div>\r\n        <h2>Add Product</h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Product Name\"\r\n          value={productName}\r\n          onChange={(e) => setProductName(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Product Price (Ether)\"\r\n          value={productPrice}\r\n          onChange={(e) => setProductPrice(e.target.value)}\r\n        />\r\n        <button onClick={addProduct}>Add Product</button>\r\n      </div>\r\n      <div>\r\n        <h2>Available Products</h2>\r\n        {products.map((product) => (\r\n          <div key={product.id}>\r\n            <p>\r\n              <strong>Name:</strong> {product.name}\r\n            </p>\r\n            <p>\r\n              <strong>Price:</strong> {product.price} Ether\r\n            </p>\r\n            <p>\r\n              <strong>Seller:</strong> {product.seller}\r\n            </p>\r\n            {product.isAvailable ? (\r\n              <button onClick={() => purchaseProduct(product.id, ethers.utils.parseEther(product.price))}>\r\n                Purchase\r\n              </button>\r\n            ) : (\r\n              <p>This product is not available</p>\r\n            )}\r\n            <hr />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAQA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,sBAAsB,MAAM,2BAA2B;AAC9D,OAAOC,cAAc,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEhB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}