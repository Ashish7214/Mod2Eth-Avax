{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { ethers } from 'ethers';\n// import detectEthereumProvider from '@metamask/detect-provider';\n// import MarketplaceABI from './contracts/MarketplaceABI.json';\n\n// const App = () => {\n//   const [productCount, setProductCount] = useState(0);\n//   const [productName, setProductName] = useState('');\n//   const [productPrice, setProductPrice] = useState('');\n//   const [products, setProducts] = useState([]);\n//   const [provider, setProvider] = useState(null);\n//   const [contract, setContract] = useState(null);\n//   const [walletAddress, setWalletAddress] = useState('');\n//   const [isLoading, setIsLoading] = useState(true);\n//   const [currentProductName, setCurrentProductName] = useState('');\n//   const [currentProductPrice, setCurrentProductPrice] = useState('');\n\n//   const contractAddress = '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266';\n\n//   useEffect(() => {\n//     const initializeProvider = async () => {\n//       const provider = await detectEthereumProvider();\n\n//       if (provider) {\n//         setProvider(new ethers.providers.Web3Provider(provider));\n//       } else {\n//         console.error('Please install Metamask to interact with the wallet.');\n//       }\n//     };\n\n//     initializeProvider();\n//   }, []);\n\n//   useEffect(() => {\n//     if (provider) {\n//       const signer = provider.getSigner();\n//       setContract(new ethers.Contract(contractAddress, MarketplaceABI.abi, signer));\n//     }\n//   }, [provider]);\n\n//   const getWalletAddress = async () => {\n//     try {\n//       const accounts = await provider.send('eth_requestAccounts', []);\n//       setWalletAddress(accounts[0]);\n//     } catch (error) {\n//       console.error('Error connecting to the wallet:', error);\n//     }\n//   };\n\n//   const addProduct = async () => {\n//     if (productName && productPrice && contract) {\n//       try {\n//         await contract.addProduct(productName, ethers.utils.parseEther(productPrice));\n//         setCurrentProductName(productName); // Set the current product name\n//         setCurrentProductPrice(productPrice); // Set the current product price\n//         getProducts();\n//         setProductName('');\n//         setProductPrice('');\n//       } catch (error) {\n//         console.error('Error adding product:', error);\n//       }\n//     }\n//   };\n\n//   const purchaseProduct = async (productId, productPrice) => {\n//     if (contract) {\n//       try {\n//         await contract.purchaseProduct(productId, { value: productPrice });\n//         getProducts();\n//       } catch (error) {\n//         console.error('Error purchasing product:', error);\n//       }\n//     }\n//   };\n\n//   const getProducts = async () => {\n//     if (contract) {\n//       try {\n//         const count = await contract.productCount();\n//         setProductCount(count.toNumber());\n\n//         const productList = [];\n//         for (let i = 1; i <= count.toNumber(); i++) {\n//           const product = await contract.products(i);\n//           productList.push({\n//             id: product.id.toNumber(),\n//             name: product.name,\n//             price: ethers.utils.formatEther(product.price),\n//             seller: product.seller,\n//             isAvailable: product.isAvailable,\n//           });\n//         }\n\n//         setProducts(productList);\n//       } catch (error) {\n//         console.error('Error getting products:', error);\n//       }\n//     }\n//     setIsLoading(false);\n//   };\n\n//   useEffect(() => {\n//     if (contract) {\n//       getWalletAddress();\n//       getProducts();\n//     }\n//   }, [contract]);\n\n//   if (isLoading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Marketplace Frontend</h1>\n//       <p>Wallet Address: {walletAddress}</p>\n//       <div>\n//         <h2>Add Product</h2>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Product Name\"\n//           value={productName}\n//           onChange={(e) => setProductName(e.target.value)}\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Product Price (Ether)\"\n//           value={productPrice}\n//           onChange={(e) => setProductPrice(e.target.value)}\n//         />\n//         <button onClick={addProduct}>Add Product</button>\n//       </div>\n//       <div>\n//         <h2>Current Product Details</h2>\n//         <p>\n//           <strong>Name:</strong> {currentProductName}\n//         </p>\n//         <p>\n//           <strong>Price:</strong> {currentProductPrice} Ether\n//         </p>\n//       </div>\n//       <div>\n//         <h2>Available Products</h2>\n//         {products.map((product) => (\n//           <div key={product.id}>\n//             <p>\n//               <strong>Name:</strong> {product.name}\n//             </p>\n//             <p>\n//               <strong>Price:</strong> {product.price} Ether\n//             </p>\n//             <p>\n//               <strong>Seller:</strong> {product.seller}\n//             </p>\n//             {product.isAvailable ? (\n//               <button onClick={() => purchaseProduct(product.id, ethers.utils.parseEther(product.price))}>\n//                 Purchase\n//               </button>\n//             ) : (\n//               <p>This product is not available</p>\n//             )}\n//             <hr />\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/krpra/Desktop/Dapps/my-dapp/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import './App.css';\r\n// import { ethers } from 'ethers';\r\n// import detectEthereumProvider from '@metamask/detect-provider';\r\n// import MarketplaceABI from './contracts/MarketplaceABI.json';\r\n\r\n// const App = () => {\r\n//   const [productCount, setProductCount] = useState(0);\r\n//   const [productName, setProductName] = useState('');\r\n//   const [productPrice, setProductPrice] = useState('');\r\n//   const [products, setProducts] = useState([]);\r\n//   const [provider, setProvider] = useState(null);\r\n//   const [contract, setContract] = useState(null);\r\n//   const [walletAddress, setWalletAddress] = useState('');\r\n//   const [isLoading, setIsLoading] = useState(true);\r\n//   const [currentProductName, setCurrentProductName] = useState('');\r\n//   const [currentProductPrice, setCurrentProductPrice] = useState('');\r\n\r\n//   const contractAddress = '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266';\r\n\r\n//   useEffect(() => {\r\n//     const initializeProvider = async () => {\r\n//       const provider = await detectEthereumProvider();\r\n\r\n//       if (provider) {\r\n//         setProvider(new ethers.providers.Web3Provider(provider));\r\n//       } else {\r\n//         console.error('Please install Metamask to interact with the wallet.');\r\n//       }\r\n//     };\r\n\r\n//     initializeProvider();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (provider) {\r\n//       const signer = provider.getSigner();\r\n//       setContract(new ethers.Contract(contractAddress, MarketplaceABI.abi, signer));\r\n//     }\r\n//   }, [provider]);\r\n\r\n//   const getWalletAddress = async () => {\r\n//     try {\r\n//       const accounts = await provider.send('eth_requestAccounts', []);\r\n//       setWalletAddress(accounts[0]);\r\n//     } catch (error) {\r\n//       console.error('Error connecting to the wallet:', error);\r\n//     }\r\n//   };\r\n\r\n//   const addProduct = async () => {\r\n//     if (productName && productPrice && contract) {\r\n//       try {\r\n//         await contract.addProduct(productName, ethers.utils.parseEther(productPrice));\r\n//         setCurrentProductName(productName); // Set the current product name\r\n//         setCurrentProductPrice(productPrice); // Set the current product price\r\n//         getProducts();\r\n//         setProductName('');\r\n//         setProductPrice('');\r\n//       } catch (error) {\r\n//         console.error('Error adding product:', error);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const purchaseProduct = async (productId, productPrice) => {\r\n//     if (contract) {\r\n//       try {\r\n//         await contract.purchaseProduct(productId, { value: productPrice });\r\n//         getProducts();\r\n//       } catch (error) {\r\n//         console.error('Error purchasing product:', error);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const getProducts = async () => {\r\n//     if (contract) {\r\n//       try {\r\n//         const count = await contract.productCount();\r\n//         setProductCount(count.toNumber());\r\n\r\n//         const productList = [];\r\n//         for (let i = 1; i <= count.toNumber(); i++) {\r\n//           const product = await contract.products(i);\r\n//           productList.push({\r\n//             id: product.id.toNumber(),\r\n//             name: product.name,\r\n//             price: ethers.utils.formatEther(product.price),\r\n//             seller: product.seller,\r\n//             isAvailable: product.isAvailable,\r\n//           });\r\n//         }\r\n\r\n//         setProducts(productList);\r\n//       } catch (error) {\r\n//         console.error('Error getting products:', error);\r\n//       }\r\n//     }\r\n//     setIsLoading(false);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (contract) {\r\n//       getWalletAddress();\r\n//       getProducts();\r\n//     }\r\n//   }, [contract]);\r\n\r\n//   if (isLoading) {\r\n//     return <div>Loading...</div>;\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>Marketplace Frontend</h1>\r\n//       <p>Wallet Address: {walletAddress}</p>\r\n//       <div>\r\n//         <h2>Add Product</h2>\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Product Name\"\r\n//           value={productName}\r\n//           onChange={(e) => setProductName(e.target.value)}\r\n//         />\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Product Price (Ether)\"\r\n//           value={productPrice}\r\n//           onChange={(e) => setProductPrice(e.target.value)}\r\n//         />\r\n//         <button onClick={addProduct}>Add Product</button>\r\n//       </div>\r\n//       <div>\r\n//         <h2>Current Product Details</h2>\r\n//         <p>\r\n//           <strong>Name:</strong> {currentProductName}\r\n//         </p>\r\n//         <p>\r\n//           <strong>Price:</strong> {currentProductPrice} Ether\r\n//         </p>\r\n//       </div>\r\n//       <div>\r\n//         <h2>Available Products</h2>\r\n//         {products.map((product) => (\r\n//           <div key={product.id}>\r\n//             <p>\r\n//               <strong>Name:</strong> {product.name}\r\n//             </p>\r\n//             <p>\r\n//               <strong>Price:</strong> {product.price} Ether\r\n//             </p>\r\n//             <p>\r\n//               <strong>Seller:</strong> {product.seller}\r\n//             </p>\r\n//             {product.isAvailable ? (\r\n//               <button onClick={() => purchaseProduct(product.id, ethers.utils.parseEther(product.price))}>\r\n//                 Purchase\r\n//               </button>\r\n//             ) : (\r\n//               <p>This product is not available</p>\r\n//             )}\r\n//             <hr />\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}